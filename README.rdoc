= K3 Authorization

== Introduction

This gem adds flexible authorization capabilities to Rails engines by allowing
gem developers to add an authorization definition file, and then use any
authorization libraries they wish in their gem (CanCan, etc).

For example, there may be several gems that each use different authorization
libraries.  One may use CanCan, another may use declarative_authorization, and
another may have its own home-grown authorization implementation.  This is
fine as long as each gem provides a config/authorization.rb file defining the
abilities it recognizes and some default permission sets suggesting how these
could be used.  This gem (k3_authorization) reads in those files and extends
Rails engines to expose those settings.

For example, SomeClass::Engine.authorization will return an AuthorizationSet
object, containing the details from the authorization.rb file.

This gem provides an API or middle ground so that gem developers can include
authorization features in their code.  And application developers may use
multiple, separately developed gems and have them all work together.

In a full Rails app, an authorization glue gem can then pull authorization
definitions from multiple gems together and present a complete, cohesive user
experience to the admin user.


== Authorization Glue GEM

Another GEM (separate from this one), must be used to pull together all the
authorization definitions into a usable system.  This GEM must define:

* K3::Authorization::BaseController - inherits from ApplicationController
  * k3_user - returns logged in user or faux "guest" user that returns guest privileges and responds_to k3_permitted?
  * k3_authorization_required - gets called when authorization fails in a controller
* Mostly likely a user interface for letting the end-user specify authorizations


== Sample authorization.rb File

Here is a sample authorization.rb file that demonstrates the basics of the DSL:

    MyGem::Engine.authorizations.draw do
      # First define and describe some suggested permission sets.
      suggested_permission_set :default, ‘Allows managers to create & edit all pages, and delete their own pages’
      suggested_permission_set :user_creation, ‘Allows users to create and manage their own pages’
      
      # Context makes all abilities defined within to be prefixed with the
      # singularized version of the given string.  Contexts can be nested.
      context :pages do
        ability :view, ‘Can view a page’  # Creates :page_view ability
        ability :edit, ‘Can edit a page’
        ability :edit_own, ‘Can edit only my pages’
        ability :create, ‘Can create a new page’
        ability :delete, ‘Can delete a page’
        ability :delete_own, ‘Can delete only pages created by me’
        
        # This defines the abilities for the default suggested permission set
        # in terms of the four default roles (guest, user, manager, admin)
        extend_suggested_permission_set :default do
          guest :has => :view
          # NOTE: :includes_role without first defining the role to be included
          # will cause an error.  The included abilities are limited to the
          # context of this extend_suggested_permission_set block.
          user :includes_role => :guest
          manager :has => [:create, :edit_own, :delete_own], :includes_role => :user
          # :all only applies to the abilities in this context (:pages)
          admin :has => :all
        end
        
        # Define abilities for the suggested permission set.
        extend_suggested_permission_set :user_creation do
          guest :has => :view
          user :has => [:create, :edit_own, :delete_own], :includes_role => :guest
          manager :has => :all
          admin :has => :all
        end
      end
      
      # Another example, in the context of comments.
      context :comments do
        ability :create, ‘Can comment on a post’
        ...
       
        extend_suggested_permission_set(:default) do
          guest :has => :create, :edit_own, :delete_own, :view
          ...
        end
      end
    end

Note that:

    context :pages do
      context :comments do
        ability :view, 'Can view a page'
        ability :edit, 'Can edit a page'
      end
    end

is identical to:

    ability :view_page_comment, 'Can view a page'
    ability :edit_page_comment, 'Can edit a page'


== Summary of files

* authorization_set.rb - defines AuthorizationSet which stores a set of abilities, and a set of suggested_permission_sets for an engine
* engine_additions.rb - extends the Rails::Engine class to return an AuthorizationSet object
* exceptions.rb - defines several custom exceptions, used by this extension
* parser.rb - defines a Parser class to parse the authorization.rb file of an engine and store the results in an AuthorizationSet
* permission_set.rb = defines PermissionSet which stores the name, description, and abilities for default roles: admin, manager, member, guest
* railtie.rb - Contains rails initialization which loads authorizations for all Engines.


== Specs

To run specs, cd to this directory and run:  bundle exec rspec spec
